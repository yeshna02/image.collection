{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yeshna02/image.collection/blob/main/ImageCollection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "GBcfLqZ4MFtJ",
        "outputId": "7089354f-aeea-479e-8595-77aa6a56aea2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting azure-storage-blob\n",
            "  Downloading azure_storage_blob-12.16.0-py3-none-any.whl (387 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m388.0/388.0 kB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting azure-core<2.0.0,>=1.26.0 (from azure-storage-blob)\n",
            "  Downloading azure_core-1.26.4-py3-none-any.whl (173 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m173.9/173.9 kB\u001b[0m \u001b[31m20.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: cryptography>=2.1.4 in /usr/local/lib/python3.10/dist-packages (from azure-storage-blob) (40.0.2)\n",
            "Requirement already satisfied: typing-extensions>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from azure-storage-blob) (4.5.0)\n",
            "Collecting isodate>=0.6.1 (from azure-storage-blob)\n",
            "  Downloading isodate-0.6.1-py2.py3-none-any.whl (41 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.7/41.7 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests>=2.18.4 in /usr/local/lib/python3.10/dist-packages (from azure-core<2.0.0,>=1.26.0->azure-storage-blob) (2.27.1)\n",
            "Requirement already satisfied: six>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from azure-core<2.0.0,>=1.26.0->azure-storage-blob) (1.16.0)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography>=2.1.4->azure-storage-blob) (1.15.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography>=2.1.4->azure-storage-blob) (2.21)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->azure-core<2.0.0,>=1.26.0->azure-storage-blob) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->azure-core<2.0.0,>=1.26.0->azure-storage-blob) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->azure-core<2.0.0,>=1.26.0->azure-storage-blob) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->azure-core<2.0.0,>=1.26.0->azure-storage-blob) (3.4)\n",
            "Installing collected packages: isodate, azure-core, azure-storage-blob\n",
            "Successfully installed azure-core-1.26.4 azure-storage-blob-12.16.0 isodate-0.6.1\n"
          ]
        }
      ],
      "source": [
        "!pip install azure-storage-blob\n",
        "from azure.storage.blob import ContainerClient"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import json\n",
        "\n",
        "def GetNYCImageMetadata(imageUrl):\n",
        "  # Replace <MDWComputerVision Subscription Key> with your valid subscription key.\n",
        "  subscription_key = \"9e30bfa4d3d142aaa68371c5cc2a1c98\"\n",
        "  \n",
        "  #Replace <MDWComputerVision Base URL> with your valid Computer Vision API base url\n",
        "  vision_base_url = \"https://australiaeast.api.cognitive.microsoft.com/\" #It should look like this one: https://australiaeast.api.cognitive.microsoft.com/\n",
        "  analyze_url = vision_base_url + \"vision/v2.0/analyze\"\n",
        "  \n",
        "  #Populate require request information\n",
        "  headers = {'Ocp-Apim-Subscription-Key': subscription_key}\n",
        "  params  = {'visualFeatures': 'Categories,Description,Color,Brands,Tags,Objects', 'details':'Landmarks'}\n",
        "  data    = {'url': imageUrl}\n",
        "  \n",
        "  #Submit Computer Vision request for given image url\n",
        "  response = requests.post(analyze_url, headers=headers, params=params, json=data)\n",
        "  response.raise_for_status()\n",
        "\n",
        "  # The 'analysis' object contains various fields that describe the image. The most\n",
        "  # relevant caption for the image is obtained from the 'description' property.\n",
        "  analysis = response.json()\n",
        "  return json.dumps(analysis).replace('\"requestId\"','\"imageUrl\":\"' + imageUrl + '\",\"requestId\"')"
      ],
      "metadata": {
        "id": "9RSkcduUMT94"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nycImageUrl = 'https://raw.githubusercontent.com/yeshna02/image.collection/main/chino-rocha-SDmXMe4bf-0-unsplash.jpg' # Enter any image link here"
      ],
      "metadata": {
        "id": "SBZyRoL1MJAq"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from urllib.parse import urlparse\n",
        "#invoke Computer Vision API to retrieve image metadata\n",
        "jsonImageMetadata = GetNYCImageMetadata(nycImageUrl)\n",
        "parsed = json.loads(jsonImageMetadata)\n",
        "print(json.dumps(parsed, indent=4))"
      ],
      "metadata": {
        "id": "VwGaaD1NM1bN",
        "outputId": "377dcb28-83b0-4adc-b3db-b6bd5ba98a2d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\n",
            "    \"categories\": [\n",
            "        {\n",
            "            \"name\": \"outdoor_\",\n",
            "            \"score\": 0.00390625,\n",
            "            \"detail\": {\n",
            "                \"landmarks\": []\n",
            "            }\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"people_group\",\n",
            "            \"score\": 0.4375\n",
            "        }\n",
            "    ],\n",
            "    \"color\": {\n",
            "        \"dominantColorForeground\": \"Black\",\n",
            "        \"dominantColorBackground\": \"Green\",\n",
            "        \"dominantColors\": [\n",
            "            \"Black\",\n",
            "            \"Green\"\n",
            "        ],\n",
            "        \"accentColor\": \"9B6730\",\n",
            "        \"isBwImg\": false,\n",
            "        \"isBWImg\": false\n",
            "    },\n",
            "    \"tags\": [\n",
            "        {\n",
            "            \"name\": \"grass\",\n",
            "            \"confidence\": 0.9998068809509277\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"outdoor\",\n",
            "            \"confidence\": 0.9968812465667725\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"person\",\n",
            "            \"confidence\": 0.9961102604866028\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"tree\",\n",
            "            \"confidence\": 0.9862159490585327\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"field\",\n",
            "            \"confidence\": 0.9821268916130066\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"soccer\",\n",
            "            \"confidence\": 0.9712035655975342,\n",
            "            \"hint\": \"sport\"\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"sports equipment\",\n",
            "            \"confidence\": 0.9492099285125732\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"playing\",\n",
            "            \"confidence\": 0.9387973546981812\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"rugby\",\n",
            "            \"confidence\": 0.7528818845748901\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"group\",\n",
            "            \"confidence\": 0.6693142056465149\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"game\",\n",
            "            \"confidence\": 0.6420339941978455\n",
            "        },\n",
            "        {\n",
            "            \"name\": \"footwear\",\n",
            "            \"confidence\": 0.5432506203651428\n",
            "        }\n",
            "    ],\n",
            "    \"description\": {\n",
            "        \"tags\": [\n",
            "            \"grass\",\n",
            "            \"outdoor\",\n",
            "            \"person\",\n",
            "            \"field\",\n",
            "            \"soccer\",\n",
            "            \"playing\",\n",
            "            \"group\",\n",
            "            \"man\",\n",
            "            \"ball\",\n",
            "            \"game\",\n",
            "            \"player\",\n",
            "            \"running\",\n",
            "            \"young\",\n",
            "            \"green\",\n",
            "            \"grassy\",\n",
            "            \"rugby\",\n",
            "            \"couple\",\n",
            "            \"people\",\n",
            "            \"jumping\",\n",
            "            \"woman\",\n",
            "            \"frisbee\",\n",
            "            \"air\"\n",
            "        ],\n",
            "        \"captions\": [\n",
            "            {\n",
            "                \"text\": \"a group of people playing football on a field\",\n",
            "                \"confidence\": 0.8834488736540093\n",
            "            }\n",
            "        ]\n",
            "    },\n",
            "    \"objects\": [\n",
            "        {\n",
            "            \"rectangle\": {\n",
            "                \"x\": 1278,\n",
            "                \"y\": 505,\n",
            "                \"w\": 139,\n",
            "                \"h\": 286\n",
            "            },\n",
            "            \"object\": \"person\",\n",
            "            \"confidence\": 0.521\n",
            "        },\n",
            "        {\n",
            "            \"rectangle\": {\n",
            "                \"x\": 394,\n",
            "                \"y\": 491,\n",
            "                \"w\": 243,\n",
            "                \"h\": 603\n",
            "            },\n",
            "            \"object\": \"person\",\n",
            "            \"confidence\": 0.71\n",
            "        },\n",
            "        {\n",
            "            \"rectangle\": {\n",
            "                \"x\": 614,\n",
            "                \"y\": 420,\n",
            "                \"w\": 514,\n",
            "                \"h\": 708\n",
            "            },\n",
            "            \"object\": \"person\",\n",
            "            \"confidence\": 0.872\n",
            "        },\n",
            "        {\n",
            "            \"rectangle\": {\n",
            "                \"x\": 987,\n",
            "                \"y\": 459,\n",
            "                \"w\": 267,\n",
            "                \"h\": 602\n",
            "            },\n",
            "            \"object\": \"person\",\n",
            "            \"confidence\": 0.739\n",
            "        },\n",
            "        {\n",
            "            \"rectangle\": {\n",
            "                \"x\": 81,\n",
            "                \"y\": 223,\n",
            "                \"w\": 509,\n",
            "                \"h\": 1059\n",
            "            },\n",
            "            \"object\": \"person\",\n",
            "            \"confidence\": 0.758\n",
            "        },\n",
            "        {\n",
            "            \"rectangle\": {\n",
            "                \"x\": 1090,\n",
            "                \"y\": 444,\n",
            "                \"w\": 649,\n",
            "                \"h\": 714\n",
            "            },\n",
            "            \"object\": \"person\",\n",
            "            \"confidence\": 0.835\n",
            "        }\n",
            "    ],\n",
            "    \"brands\": [],\n",
            "    \"imageUrl\": \"https://raw.githubusercontent.com/yeshna02/image.collection/main/chino-rocha-SDmXMe4bf-0-unsplash.jpg\",\n",
            "    \"requestId\": \"be951346-9ad9-4ac0-83c4-6a5bb6a8b9b2\",\n",
            "    \"metadata\": {\n",
            "        \"height\": 1282,\n",
            "        \"width\": 1920,\n",
            "        \"format\": \"Jpeg\"\n",
            "    }\n",
            "}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# def SaveImageMetadataFile(image_metadata, file_name):\n",
        "#   # Replace <MDWDataLake storage account name> with your valid storage account name\n",
        "#   datalakeAccountName = 'synapsedatalake[suffix]' #<--Replace [suffix] with your own suffix.\n",
        "  \n",
        "#   # Replace <MDWDataLake storage account key> with your valid storage account name\n",
        "#   datalakeAccountKey = '<your SynapseDataLake account key>' #<-- Replace it with your Synapse Data Lake account key\n",
        "  \n",
        "#   connection_string = \\\n",
        "#     f\"DefaultEndpointsProtocol=https;\" \\\n",
        "#     f\"AccountName={datalakeAccountName};\" \\\n",
        "#     f\"AccountKey={datalakeAccountKey};\"\n",
        "#   container_name = \"nycimagemetadata\"\n",
        "#   container_client = ContainerClient.from_connection_string(connection_string, container_name=container_name)\n",
        "\n",
        "#   try:\n",
        "#       # Instantiate a new BlobClient\n",
        "#       blob_client = container_client.get_blob_client(file_name)\n",
        "#       # Upload the blob\n",
        "#       blob_client.upload_blob(image_metadata, blob_type=\"BlockBlob\")\n",
        "#   except Exception as e:\n",
        "#       print(f\"Error {e}\")"
      ],
      "metadata": {
        "id": "6D23ZJSEMU0f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Generate filename for image metadata file.\n",
        "# filePath = urlparse(nycImageUrl)[2]\n",
        "# filePathParts = filePath.split('/')\n",
        "# fileName = filePathParts[len(filePathParts)-1] + '.json'\n",
        "\n",
        "#Save image metadata file in the NYCImageMetadata container\n",
        "# SaveImageMetadataFile(jsonImageMetadata, fileName)"
      ],
      "metadata": {
        "id": "1GAbYgl6MpJd"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}